import {generateId} from '../generate';
import type {HttpStatusError} from '../http-status';

type LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'fatal';

type ExceptionOptions = {
	name?: string;
	cause?: unknown;
	/* The HTTP status code generated by the origin server for this occurrence of the problem. */
	status?: HttpStatusError;
	/* Unique identifier for the error. */
	traceId?: string;
	/* Metadata and custom properties. */
	meta?: Record<string, unknown>;
	/* A human-readable message for the error, can be displayed frontend. */
	readableMessage?: string;
	logLevel?: LogLevel;
};

export interface Exception extends Error {
	__exception: boolean;
	/* Unique identifier for the error. */
	traceId: string;
	/* The HTTP status code generated by the origin server for this occurrence of the problem. */
	status: HttpStatusError;
	/* The time the error occurred (ms since epoch). */
	timestamp: number;
	/* Metadata and custom properties. */
	meta?: Record<string, unknown>;
	/* A human-readable message for the error, can be displayed frontend. */
	readableMessage?: string;
	/* The log level for the error. */
	logLevel: LogLevel;
	toJson(): string;
}

export interface ExceptionConstructor {
	new (message?: string, options?: ExceptionOptions): Exception;
	readonly prototype: Exception;
}

/**
 * Creates a custom exception class.
 *
 * @param defaultName - The default name for the exception.
 * @param properties - Default properties including message and HTTP status.
 * @returns A class that extends Error and implements the Exception interface.
 */
export const createCustomException = (
	properties: {
		defaultMessage: string;
		defaultName?: string;
		defaultStatus?: HttpStatusError;
		defaultLogLevel?: LogLevel;
	} = {
		defaultName: 'Exception',
		defaultMessage: 'Exception',
		defaultStatus: 500,
		defaultLogLevel: 'error',
	},
): ExceptionConstructor => {
	return class extends Error implements Exception {
		__exception = true;
		meta: Record<string, unknown>;
		traceId: string;
		status: HttpStatusError;
		timestamp = Date.now();
		readableMessage?: string;
		logLevel: LogLevel;

		/**
		 * Constructor for the custom exception.
		 *
		 * @param message - The error message.
		 * @param options - Optional object containing additional error details.
		 */
		constructor(
			message: string = properties.defaultMessage,
			options?: ExceptionOptions,
		) {
			super(message);
			this.status = options?.status || properties.defaultStatus || 500;
			this.name = options?.name || properties.defaultName || 'Exception';
			this.cause = options?.cause;
			this.traceId = options?.traceId || generateId(8);
			this.readableMessage = options?.readableMessage;
			this.meta = Object.assign(
				{},
				options?.meta,
				(options?.cause as Exception | undefined)?.meta,
			);
			this.logLevel =
				options?.logLevel ?? properties.defaultLogLevel ?? 'error';

			Object.setPrototypeOf(this, new.target.prototype);
		}

		toJson(): string {
			return JSON.stringify({
				message: this.message,
				name: this.name,
				status: this.status,
				timestamp: this.timestamp,
				traceId: this.traceId,
				meta: this.meta,
				readableMessage: this.readableMessage,
			});
		}
	};
};
